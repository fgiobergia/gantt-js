!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const i=n(1),r=new Date;function o(t,e,n,i){return Math.round(t/(n.getTime()-e.getTime())*i)}function u(t){return null===t?r:t}function a(t){const[e,n]=function(t){return[t.map(t=>t.from).reduce((t,e)=>t.getTime()<e.getTime()?t:e),t.map(t=>u(t.to)).reduce((t,e)=>t.getTime()>e.getTime()?t:e)]}(t),i=[...t].sort((t,e)=>t.from.getTime()-e.from.getTime()),r="http://www.w3.org/2000/svg",a=document.createElementNS(r,"svg"),s=30*(i.length+1),c=Math.round(5);a.setAttribute("width","800"),a.setAttribute("height",""+s),a.append(...[...Array(i.length+1).keys()].map(t=>{const e=document.createElementNS(r,"rect"),n=t%2==0?"rgb(224,224,224)":"rgb(238,238,238)",i=30*t;return e.setAttribute("fill",n),e.setAttribute("width","800"),e.setAttribute("height","30"),e.setAttribute("x","0"),e.setAttribute("y",""+i),console.log(t),e}));const l=i.map((t,i)=>{const a=function(t,e,n,i){return o(t.from.getTime()-e.getTime(),e,n,i)}(t,e,n,800),l=30*i+c,m=function(t,e,n,i){return o(u(t.to).getTime()-t.from.getTime(),e,n,i)}(t,e,n,800),b=document.createElementNS(r,"rect");b.classList.add("bar"),b.setAttribute("fill","rgb(230,40,40)"),b.setAttribute("opacity","0.4"),b.setAttribute("width",""+m),b.setAttribute("height","20"),b.setAttribute("x",""+a),b.setAttribute("y",""+l),b.setAttribute("rx","5"),b.setAttribute("ry","5");const d=document.createElementNS(r,"rect");d.classList.add("popuprect");const f=l+20+120>s?s-120:l+20;d.setAttribute("fill","white"),d.setAttribute("opacity",".7"),d.setAttribute("width","300"),d.setAttribute("height","120"),d.setAttribute("x",""+a),d.setAttribute("y",""+f),d.setAttribute("rx","5"),d.setAttribute("ry","5");const p=document.createElementNS(r,"g"),A=f+25,g=document.createElementNS(r,"text");g.setAttribute("x",""+(a+10)),g.setAttribute("y",""+A),g.setAttribute("font-weight","bold"),g.setAttribute("font-family","Optima"),g.setAttribute("font-size","16"),g.textContent=t.title;const y=A+25,h=document.createElementNS(r,"text");h.setAttribute("x",""+(a+10)),h.setAttribute("y",""+y),h.textContent=t.institution,h.setAttribute("font-family","Optima"),h.setAttribute("font-size","16"),h.setAttribute("font-style","italic");const x=y+25,w=document.createElementNS(r,"text");w.setAttribute("x",""+(a+10)),w.setAttribute("y",""+x),w.textContent=`${t.from.toLocaleString("en-GB",{month:"short",year:"numeric"})} - ${u(t.to).toLocaleString("en-GB",{month:"short",year:"numeric"})}`,w.setAttribute("font-family","Optima"),w.setAttribute("font-size","13");const S=x+25,v=document.createElementNS(r,"text");return v.setAttribute("x",""+(a+10)),v.setAttribute("y",""+S),v.textContent=t.location,v.setAttribute("font-family","Optima"),v.setAttribute("font-size","13"),p.append(d,g,w,h,v),[b,p]}),m=l.map(t=>t[0]),b=l.map(t=>t[1]);l.forEach(t=>{const[e,n]=t;e.onmouseover=()=>n.classList.add("visible"),e.onmouseout=()=>n.classList.remove("visible")}),a.append(...m),a.append(...b),document.getElementById("container").appendChild(a),b.map(t=>{const[e,...n]=[...t.children],i=Math.round(Math.max(...n.map(t=>t.getBBox().width)))+20;e.setAttribute("width",""+i);const r=t.getBBox().x+i>800?800-i:t.getBBox().x;e.setAttribute("x",""+r),n.forEach(t=>t.setAttribute("x",""+(r+10))),t.classList.add("popup")})}window.onload=()=>a(i.entries)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.entries=void 0,e.entries=[{from:new Date(2012,9),to:new Date(2015,5),location:"Turin, Italy",institution:"Politecnico di Torino",title:"BSc, Computer engineering"},{from:new Date(2015,6),to:new Date(2017,11),location:"Turin, Italy",title:"MSc, Computer engineering",institution:"Politecnico di Torino"},{from:new Date(2015,6),to:new Date(2017,11),location:"Turin/Milan, Italy",title:"Alta Scuola Politecnica",institution:"ASP"},{from:new Date(2014,5,1),to:new Date(2014,7,30),location:"Cambridge, MA (USA)",title:"Internship @ Harvard",institution:"Berkman Klein Center @ Harvard University"},{from:new Date(2016,6,1),to:new Date(2016,8,29),location:"Batavia, IL (USA)",title:"Internship @ Fermilab",institution:"Fermi National Accelerator Laboratory"},{from:new Date(2017,10),to:new Date(2019,2),location:"Milan, Italy",title:"Consultant @ IBM",institution:"IBM"},{from:new Date(2019,4),to:null,location:"Turin, Italy",title:"MSc, Computer engineering",institution:"Politecnico di Torino"}]}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RpbWVsaW5lLnRzIiwid2VicGFjazovLy8uL3NyYy9lbnRyaWVzLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibm93IiwiRGF0ZSIsImdldFdpZHRoRnJvbURlbHRhIiwiZGVsdGEiLCJmcm9tIiwidG8iLCJ3aWR0aCIsIk1hdGgiLCJyb3VuZCIsImdldFRpbWUiLCJkYXRlT3JOb3ciLCJkYXRlIiwiZHJhd1RpbWVsaW5lIiwiZW50cmllcyIsIm1hcCIsImUiLCJyZWR1Y2UiLCJhIiwiYiIsImdldEJvdW5kYXJpZXMiLCJzb3J0ZWRFbnRyaWVzIiwic29ydCIsInN2Z05TIiwic3ZnIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50TlMiLCJzdmdIZWlnaHQiLCJsZW5ndGgiLCJ5T2Zmc2V0Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kIiwiQXJyYXkiLCJrZXlzIiwiayIsInJlY3QiLCJjb2xvciIsInkiLCJjb25zb2xlIiwibG9nIiwicmVjdHMiLCJ4IiwidGFyZ2V0IiwiZ2V0WEZyb21FbnRyeSIsImdldFdpZHRoRnJvbUVudHJ5IiwicmVjdEJhciIsImNsYXNzTGlzdCIsImFkZCIsInJlY3RQb3B1cCIsImhSZWN0IiwiZyIsImgwIiwidGV4dFRpdGxlIiwidGV4dENvbnRlbnQiLCJ0aXRsZSIsImgxIiwidGV4dEluc3RpdHV0aW9uIiwiaW5zdGl0dXRpb24iLCJoMiIsInRleHREdXJhdGlvbiIsInRvTG9jYWxlU3RyaW5nIiwibW9udGgiLCJ5ZWFyIiwiaDMiLCJ0ZXh0TG9jYXRpb24iLCJsb2NhdGlvbiIsImJhcnMiLCJncyIsImZvckVhY2giLCJiYXIiLCJvbm1vdXNlb3ZlciIsIm9ubW91c2VvdXQiLCJyZW1vdmUiLCJnZXRFbGVtZW50QnlJZCIsImFwcGVuZENoaWxkIiwidGV4dHMiLCJjaGlsZHJlbiIsInBvcHVwV2lkdGgiLCJtYXgiLCJlbCIsImdldEJCb3giLCJ3aW5kb3ciLCJvbmxvYWQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxF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QUNuQitELFNBQVUsZUFDVlgsTUFBTyw0QkFDUEcsWUFBYSx5QkFFakIsQ0FDSXBELEtBQU0sSUFBSUgsS0FBSyxLQUFNLEdBQ3JCSSxHQUFJLElBQUlKLEtBQUssS0FBTSxJQUNuQitELFNBQVUscUJBQ1ZYLE1BQU8sMEJBQ1BHLFlBQWEsT0FFakIsQ0FDSXBELEtBQU0sSUFBSUgsS0FBSyxLQUFNLEVBQUcsR0FDeEJJLEdBQUksSUFBSUosS0FBSyxLQUFNLEVBQUcsSUFDdEIrRCxTQUFVLHNCQUNWWCxNQUFPLHVCQUNQRyxZQUFhLDZDQUVqQixDQUNJcEQsS0FBTSxJQUFJSCxLQUFLLEtBQU0sRUFBRyxHQUN4QkksR0FBSSxJQUFJSixLQUFLLEtBQU0sRUFBRyxJQUN0QitELFNBQVUsb0JBQ1ZYLE1BQU8sd0JBQ1BHLFlBQWEseUNBRWpCLENBQ0lwRCxLQUFNLElBQUlILEtBQUssS0FBTSxJQUNyQkksR0FBSSxJQUFJSixLQUFLLEtBQU0sR0FDbkIrRCxTQUFVLGVBQ1ZYLE1BQU8sbUJBQ1BHLFlBQWEsT0FFakIsQ0FDSXBELEtBQU0sSUFBSUgsS0FBSyxLQUFNLEdBQ3JCSSxHQUFJLEtBQ0oyRCxTQUFVLGVBQ1ZYLE1BQU8sNEJBQ1BHLFlBQWEiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiXG5pbXBvcnQgeyBFbnRyeSB9IGZyb20gXCIuL2VudHJ5XCI7XG5pbXBvcnQgeyBlbnRyaWVzIH0gZnJvbSBcIi4vZW50cmllc1wiO1xuXG5jb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuXG4vLyBnZXQgbWluL21heCBkYXRlcywgZ2l2ZW4gYSBsaXN0IG9mIGVudHJpZXNcbmZ1bmN0aW9uIGdldEJvdW5kYXJpZXMoZW50cmllczogUmVhZG9ubHlBcnJheTxFbnRyeT4pOiBbRGF0ZSwgRGF0ZV0ge1xuICAgIGNvbnN0IG1pbiA9IGVudHJpZXMubWFwKGUgPT4gZS5mcm9tKS5yZWR1Y2UoKGEsYikgPT4gYS5nZXRUaW1lKCkgPCBiLmdldFRpbWUoKSA/IGEgOiBiKTtcbiAgICBjb25zdCBtYXggPSBlbnRyaWVzLm1hcChlID0+IGRhdGVPck5vdyhlLnRvKSkucmVkdWNlKChhLGIpID0+IGEuZ2V0VGltZSgpID4gYi5nZXRUaW1lKCkgPyBhIDogYik7XG4gICAgcmV0dXJuIFsgbWluLCBtYXggXTtcbn1cblxuLy8gZ2V0IGhvcml6b250YWwgc3BhbiBvZiBkZWx0YSwgcHJvcG9ydGlvbmVkIHRvIGBmcm9tYCBhbmQgYHRvYCBkYXRlcyAoc2NhbGVkIG9uIGB3aWR0aGApXG5mdW5jdGlvbiBnZXRXaWR0aEZyb21EZWx0YShkZWx0YTogbnVtYmVyLCBmcm9tOiBEYXRlLCB0bzogRGF0ZSwgd2lkdGg6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoZGVsdGEgLyAodG8uZ2V0VGltZSgpIC0gZnJvbS5nZXRUaW1lKCkpICogd2lkdGgpO1xufVxuXG5mdW5jdGlvbiBnZXRYRnJvbUVudHJ5KHRhcmdldDogRW50cnksIGZyb206IERhdGUsIHRvOiBEYXRlLCB3aWR0aDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZ2V0V2lkdGhGcm9tRGVsdGEodGFyZ2V0LmZyb20uZ2V0VGltZSgpIC0gZnJvbS5nZXRUaW1lKCksIGZyb20sIHRvLCB3aWR0aCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoRnJvbUVudHJ5KHRhcmdldDogRW50cnksIGZyb206IERhdGUsIHRvOiBEYXRlLCB3aWR0aDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gZ2V0V2lkdGhGcm9tRGVsdGEoZGF0ZU9yTm93KHRhcmdldC50bykuZ2V0VGltZSgpIC0gdGFyZ2V0LmZyb20uZ2V0VGltZSgpLCBmcm9tLCB0bywgd2lkdGgpO1xufVxuXG5mdW5jdGlvbiBkYXRlT3JOb3coZGF0ZTogRGF0ZSB8IG51bGwpOiBEYXRlIHtcbiAgICBpZiAoZGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbm93O1xuICAgIH1cbiAgICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gZHJhd1RpbWVsaW5lKGVudHJpZXM6IFJlYWRvbmx5QXJyYXk8RW50cnk+KSB7XG4gICAgY29uc3QgW2Zyb20sIHRvXSA9IGdldEJvdW5kYXJpZXMoZW50cmllcyk7XG4gICAgY29uc3Qgc29ydGVkRW50cmllcyA9IFsuLi5lbnRyaWVzXS5zb3J0KChhLGIpID0+IGEuZnJvbS5nZXRUaW1lKCkgLSBiLmZyb20uZ2V0VGltZSgpKTtcblxuICAgIGNvbnN0IHN2Z05TID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO1xuXG4gICAgY29uc3Qgc3ZnOiBTVkdTVkdFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCBcInN2Z1wiKTtcblxuICAgIGNvbnN0IHN2Z1dpZHRoID0gODAwO1xuICAgIGNvbnN0IHJvd0hlaWdodCA9IDMwO1xuICAgIGNvbnN0IHN2Z0hlaWdodCA9IHJvd0hlaWdodCAqIChzb3J0ZWRFbnRyaWVzLmxlbmd0aCsxKTtcbiAgICBjb25zdCBsaWdodFJvd0NvbG9yID0gXCJyZ2IoMjM4LDIzOCwyMzgpXCI7XG4gICAgY29uc3QgZGFya1Jvd0NvbG9yID0gXCJyZ2IoMjI0LDIyNCwyMjQpXCI7XG4gICAgY29uc3QgcmVjdEhlaWdodCA9IDIwO1xuICAgIGNvbnN0IHlPZmZzZXQgPSBNYXRoLnJvdW5kKChyb3dIZWlnaHQgLSByZWN0SGVpZ2h0KS8yKTtcbiAgICBjb25zdCByZWN0Q29sb3IgPSBcInJnYigyMzAsNDAsNDApXCI7XG4gICAgY29uc3QgcmVjdFJhZGl1cyA9IDU7XG4gICAgY29uc3QgeE9mZnNldCA9IDEwO1xuICAgIGNvbnN0IHBvcHVwQ29sb3IgPSBcIndoaXRlXCI7XG4gICAgY29uc3QgcG9wdXBNYXJnaW4gPSAyNTtcbiAgICBjb25zdCBwb3B1cEhlaWdodCA9IDEyMDtcbiAgICBjb25zdCBwb3B1cFdpZHRoID0gMzAwO1xuXG4gICAgc3ZnLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIGAke3N2Z1dpZHRofWApO1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgYCR7c3ZnSGVpZ2h0fWApO1xuXG4gICAgLypcbiAgICAgKiBDcmVhdGUgcm93cyAob25lIGZvciBlYWNoIGVudHJ5IGluIHRoZSBsaXN0KSArIDEgZXh0cmEgcm93IChmb3IgbGFiZWxzKVxuICAgICAqL1xuICAgIHN2Zy5hcHBlbmQoLi4uWy4uLkFycmF5KHNvcnRlZEVudHJpZXMubGVuZ3RoKzEpLmtleXMoKV0ubWFwKGsgPT4ge1xuICAgIC8vIHN2Zy5hcHBlbmQoLi4uc29ydGVkRW50cmllcy5tYXAoKGUsIGspID0+IHtcbiAgICAgICAgY29uc3QgcmVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOUywgXCJyZWN0XCIpO1xuICAgICAgICBjb25zdCBjb2xvciA9IGsgJSAyID09PSAwID8gZGFya1Jvd0NvbG9yIDogbGlnaHRSb3dDb2xvciA7XG4gICAgICAgIGNvbnN0IHkgPSBrICogcm93SGVpZ2h0O1xuXG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBjb2xvcik7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgYCR7c3ZnV2lkdGh9YCk7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGAke3Jvd0hlaWdodH1gKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoXCJ4XCIsIFwiMFwiKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoXCJ5XCIsIGAke3l9YCk7XG5cbiAgICAgICAgY29uc29sZS5sb2coayk7XG4gICAgICAgIHJldHVybiByZWN0O1xuICAgIH0pKTtcblxuICAgIFxuXG4gICAgLypcbiAgICAgKiBDcmVhdGUgcmVjdGFuZ2xlcyAob25lIGZvciBlYWNoIGVudHJ5KVxuICAgICAqL1xuICAgIC8vIFRPRE86IHJlbW92ZSBhYWEsIHBhc3MgZGlyZWN0bHkgaW50byBzdmcuYXBwZW5kKC4uLilcbiAgICBjb25zdCByZWN0cyA9IHNvcnRlZEVudHJpZXMubWFwKChlLGspID0+IHtcbiAgICAgICAgY29uc3QgeCA9IGdldFhGcm9tRW50cnkoZSwgZnJvbSwgdG8sIHN2Z1dpZHRoKTtcbiAgICAgICAgY29uc3QgeSA9IGsgKiByb3dIZWlnaHQgKyB5T2Zmc2V0O1xuICAgICAgICBjb25zdCB3aWR0aCA9IGdldFdpZHRoRnJvbUVudHJ5KGUsIGZyb20sIHRvLCBzdmdXaWR0aCk7XG5cbiAgICAgICAgY29uc3QgcmVjdEJhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOUywgXCJyZWN0XCIpO1xuICAgICAgICByZWN0QmFyLmNsYXNzTGlzdC5hZGQoXCJiYXJcIik7XG4gICAgICAgIHJlY3RCYXIuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCByZWN0Q29sb3IpO1xuICAgICAgICByZWN0QmFyLnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgXCIwLjRcIik7XG4gICAgICAgIHJlY3RCYXIuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgYCR7d2lkdGh9YCk7XG4gICAgICAgIHJlY3RCYXIuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGAke3JlY3RIZWlnaHR9YCk7XG4gICAgICAgIHJlY3RCYXIuc2V0QXR0cmlidXRlKFwieFwiLCBgJHt4fWApO1xuICAgICAgICByZWN0QmFyLnNldEF0dHJpYnV0ZShcInlcIiwgYCR7eX1gKTtcbiAgICAgICAgcmVjdEJhci5zZXRBdHRyaWJ1dGUoXCJyeFwiLCBgJHtyZWN0UmFkaXVzfWApO1xuICAgICAgICByZWN0QmFyLnNldEF0dHJpYnV0ZShcInJ5XCIsIGAke3JlY3RSYWRpdXN9YCk7XG5cbiAgICAgICAgY29uc3QgcmVjdFBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCBcInJlY3RcIik7XG4gICAgICAgIHJlY3RQb3B1cC5jbGFzc0xpc3QuYWRkKFwicG9wdXByZWN0XCIpXG4gICAgICAgIFxuICAgICAgICBjb25zdCBoUmVjdCA9IHkgKyByZWN0SGVpZ2h0ICsgcG9wdXBIZWlnaHQgPiBzdmdIZWlnaHQgPyBzdmdIZWlnaHQgLSBwb3B1cEhlaWdodCA6IHkgKyByZWN0SGVpZ2h0O1xuICAgICAgICAvLyByZWN0UG9wdXAuY2xhc3NMaXN0LmFkZChcInBvcHVwXCIpO1xuICAgICAgICByZWN0UG9wdXAuc2V0QXR0cmlidXRlKFwiZmlsbFwiLCBwb3B1cENvbG9yKTtcbiAgICAgICAgcmVjdFBvcHVwLnNldEF0dHJpYnV0ZShcIm9wYWNpdHlcIiwgXCIuN1wiKTtcbiAgICAgICAgcmVjdFBvcHVwLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIGAke3BvcHVwV2lkdGh9YCk7XG4gICAgICAgIHJlY3RQb3B1cC5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgYCR7cG9wdXBIZWlnaHR9YCk7XG4gICAgICAgIHJlY3RQb3B1cC5zZXRBdHRyaWJ1dGUoXCJ4XCIsIGAke3h9YCk7XG4gICAgICAgIHJlY3RQb3B1cC5zZXRBdHRyaWJ1dGUoXCJ5XCIsIGAke2hSZWN0fWApO1xuICAgICAgICByZWN0UG9wdXAuc2V0QXR0cmlidXRlKFwicnhcIiwgYCR7cmVjdFJhZGl1c31gKTtcbiAgICAgICAgcmVjdFBvcHVwLnNldEF0dHJpYnV0ZShcInJ5XCIsIGAke3JlY3RSYWRpdXN9YCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCBcImdcIik7XG4gICAgICAgIFxuICAgICAgICAvLyB0aXRsZSBvZiB0aGUgcG9wdXBcbiAgICAgICAgY29uc3QgaDAgPSBoUmVjdCtwb3B1cE1hcmdpbjtcbiAgICAgICAgY29uc3QgdGV4dFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCBcInRleHRcIik7XG4gICAgICAgIHRleHRUaXRsZS5zZXRBdHRyaWJ1dGUoXCJ4XCIsIGAke3greE9mZnNldH1gKTtcbiAgICAgICAgdGV4dFRpdGxlLnNldEF0dHJpYnV0ZShcInlcIiwgYCR7aDB9YCk7XG4gICAgICAgIHRleHRUaXRsZS5zZXRBdHRyaWJ1dGUoXCJmb250LXdlaWdodFwiLCBcImJvbGRcIik7XG4gICAgICAgIHRleHRUaXRsZS5zZXRBdHRyaWJ1dGUoXCJmb250LWZhbWlseVwiLCBcIk9wdGltYVwiKTtcbiAgICAgICAgdGV4dFRpdGxlLnNldEF0dHJpYnV0ZShcImZvbnQtc2l6ZVwiLCBcIjE2XCIpO1xuICAgICAgICBcbiAgICAgICAgdGV4dFRpdGxlLnRleHRDb250ZW50ID0gZS50aXRsZTtcblxuICAgICAgICAvLyBmcm9tLXdoZW4gcm93IG9mIHBvcHVwXG4gICAgICAgIGNvbnN0IGgxID0gaDAgKyBwb3B1cE1hcmdpbjtcbiAgICAgICAgY29uc3QgdGV4dEluc3RpdHV0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCBcInRleHRcIik7XG4gICAgICAgIHRleHRJbnN0aXR1dGlvbi5zZXRBdHRyaWJ1dGUoXCJ4XCIsIGAke3greE9mZnNldH1gKTtcbiAgICAgICAgdGV4dEluc3RpdHV0aW9uLnNldEF0dHJpYnV0ZShcInlcIiwgYCR7aDF9YCk7XG4gICAgICAgIHRleHRJbnN0aXR1dGlvbi50ZXh0Q29udGVudCA9IGUuaW5zdGl0dXRpb247XG4gICAgICAgIHRleHRJbnN0aXR1dGlvbi5zZXRBdHRyaWJ1dGUoXCJmb250LWZhbWlseVwiLCBcIk9wdGltYVwiKTtcbiAgICAgICAgdGV4dEluc3RpdHV0aW9uLnNldEF0dHJpYnV0ZShcImZvbnQtc2l6ZVwiLCBcIjE2XCIpO1xuICAgICAgICB0ZXh0SW5zdGl0dXRpb24uc2V0QXR0cmlidXRlKFwiZm9udC1zdHlsZVwiLCBcIml0YWxpY1wiKTtcblxuICAgICAgICAvLyBmcm9tLXdoZW4gcm93IG9mIHBvcHVwXG4gICAgICAgIGNvbnN0IGgyID0gaDEgKyBwb3B1cE1hcmdpbjtcbiAgICAgICAgY29uc3QgdGV4dER1cmF0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCBcInRleHRcIik7XG4gICAgICAgIHRleHREdXJhdGlvbi5zZXRBdHRyaWJ1dGUoXCJ4XCIsIGAke3greE9mZnNldH1gKTtcbiAgICAgICAgdGV4dER1cmF0aW9uLnNldEF0dHJpYnV0ZShcInlcIiwgYCR7aDJ9YCk7XG4gICAgICAgIHRleHREdXJhdGlvbi50ZXh0Q29udGVudCA9IGAke2UuZnJvbS50b0xvY2FsZVN0cmluZyhcImVuLUdCXCIsIHttb250aDogXCJzaG9ydFwiLCB5ZWFyOiBcIm51bWVyaWNcIn0pfSAtICR7ZGF0ZU9yTm93KGUudG8pLnRvTG9jYWxlU3RyaW5nKFwiZW4tR0JcIiwge21vbnRoOiBcInNob3J0XCIsIHllYXI6IFwibnVtZXJpY1wifSl9YDtcbiAgICAgICAgdGV4dER1cmF0aW9uLnNldEF0dHJpYnV0ZShcImZvbnQtZmFtaWx5XCIsIFwiT3B0aW1hXCIpO1xuICAgICAgICB0ZXh0RHVyYXRpb24uc2V0QXR0cmlidXRlKFwiZm9udC1zaXplXCIsIFwiMTNcIik7XG4gICAgICAgIFxuICAgICAgICAvLyBmcm9tLXdoZW4gcm93IG9mIHBvcHVwXG4gICAgICAgIGNvbnN0IGgzID0gaDIgKyBwb3B1cE1hcmdpbjtcbiAgICAgICAgY29uc3QgdGV4dExvY2F0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z05TLCBcInRleHRcIik7XG4gICAgICAgIHRleHRMb2NhdGlvbi5zZXRBdHRyaWJ1dGUoXCJ4XCIsIGAke3greE9mZnNldH1gKTtcbiAgICAgICAgdGV4dExvY2F0aW9uLnNldEF0dHJpYnV0ZShcInlcIiwgYCR7aDN9YCk7XG4gICAgICAgIHRleHRMb2NhdGlvbi50ZXh0Q29udGVudCA9IGUubG9jYXRpb247XG4gICAgICAgIHRleHRMb2NhdGlvbi5zZXRBdHRyaWJ1dGUoXCJmb250LWZhbWlseVwiLCBcIk9wdGltYVwiKTtcbiAgICAgICAgdGV4dExvY2F0aW9uLnNldEF0dHJpYnV0ZShcImZvbnQtc2l6ZVwiLCBcIjEzXCIpO1xuXG4gICAgICAgIGcuYXBwZW5kKHJlY3RQb3B1cCwgdGV4dFRpdGxlLCB0ZXh0RHVyYXRpb24sIHRleHRJbnN0aXR1dGlvbiwgdGV4dExvY2F0aW9uKTtcblxuXG4gICAgICAgIHJldHVybiBbcmVjdEJhciwgZ107XG4gICAgLy8gZmluYWwgcmVkdWN0aW9uIG5lZWRlZCB0byBmbGF0dGVuXG4gICAgLy8gdGhlIHJlc3VsdCBvZiBtYXAgKG11bHRpcGxlIHJlY3RzXG4gICAgLy8gYXJlIHJldHVybmVkKS4gdGhlIGZsYXQoKSBmdW5jdGlvblxuICAgIC8vIGlzIGluIGVzMjAxOSwgYnV0IG5vdCB3aWRlbHkgc3VwcG9ydGVkXG4gICAgfSk7XG5cbiAgICBjb25zdCBiYXJzID0gcmVjdHMubWFwKHIgPT4gclswXSk7XG4gICAgY29uc3QgZ3MgPSByZWN0cy5tYXAociA9PiByWzFdKTtcblxuICAgIHJlY3RzLmZvckVhY2gocmVjdCA9PiB7XG4gICAgICAgIGNvbnN0IFtiYXIsIGddID0gcmVjdDtcbiAgICAgICAgYmFyLm9ubW91c2VvdmVyID0gKCkgPT4gZy5jbGFzc0xpc3QuYWRkKFwidmlzaWJsZVwiKTtcbiAgICAgICAgYmFyLm9ubW91c2VvdXQgPSAoKSA9PiBnLmNsYXNzTGlzdC5yZW1vdmUoXCJ2aXNpYmxlXCIpO1xuXG5cbiAgICB9KVxuICAgIHN2Zy5hcHBlbmQoLi4uYmFycyk7XG4gICAgc3ZnLmFwcGVuZCguLi5ncyk7XG5cbiAgICAvKlxuICAgICAqIENyZWF0ZSBwb3B1cHMgKCYmIGhpZGUgdGhlbSEpIFxuICAgICAqL1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udGFpbmVyXCIpLmFwcGVuZENoaWxkKHN2Zyk7XG5cbiAgICBncy5tYXAoZyA9PiB7XG4gICAgICAgIGNvbnN0IFsgcmVjdCwgLi4udGV4dHMgXSA9IFsuLi5nLmNoaWxkcmVuXTtcbiAgICAgICAgY29uc3QgbWF4V2lkdGggPSBNYXRoLnJvdW5kKE1hdGgubWF4KC4uLnRleHRzLm1hcCgoZWw6IFNWR0dyYXBoaWNzRWxlbWVudCkgPT4gZWwuZ2V0QkJveCgpLndpZHRoKSkpO1xuICAgICAgICBjb25zdCBwb3B1cFdpZHRoID0gbWF4V2lkdGggKyAyICogeE9mZnNldDtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBgJHtwb3B1cFdpZHRofWApO1xuICAgICAgICBjb25zdCB4ID0gZy5nZXRCQm94KCkueCArIHBvcHVwV2lkdGggPiBzdmdXaWR0aCA/IHN2Z1dpZHRoIC0gcG9wdXBXaWR0aCA6IGcuZ2V0QkJveCgpLng7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKFwieFwiLCBgJHt4fWApO1xuICAgICAgICB0ZXh0cy5mb3JFYWNoKHQgPT4gdC5zZXRBdHRyaWJ1dGUoXCJ4XCIsIGAke3greE9mZnNldH1gKSk7XG5cbiAgICAgICAgZy5jbGFzc0xpc3QuYWRkKFwicG9wdXBcIik7XG4gICAgfSlcblxuICAgIC8vIEFwcGFyZW50bHksIDx0ZXh0PnMgYXJlIG9ubHkgZ2l2ZW4gYSBzaXplXG4gICAgLy8gYWZ0ZXIgYmVpbmcgZGlzcGxheWVkIC0tIGhlbmNlLCB3YWl0IHVudGlsXG4gICAgLy8gZHJhd24gdG8gKDEpIG1ha2UgdGhlbSBpbnZpc2libGUgYW5kICgyKVxuICAgIC8vIGFzc2lnbiB0aGUgcmlnaHQgd2lkdGggdG8gZWFjaCBwb3B1cFxuXG59XG5cbndpbmRvdy5vbmxvYWQgPSAoKSA9PiBkcmF3VGltZWxpbmUoZW50cmllcyk7IiwiaW1wb3J0IHsgRW50cnkgfSBmcm9tIFwiLi9lbnRyeVwiO1xuXG5leHBvcnQgY29uc3QgZW50cmllczogUmVhZG9ubHlBcnJheTxFbnRyeT4gPSBbXG4gICAge1xuICAgICAgICBmcm9tOiBuZXcgRGF0ZSgyMDEyLCA5KSxcbiAgICAgICAgdG86IG5ldyBEYXRlKDIwMTUsIDUpLFxuICAgICAgICBsb2NhdGlvbjogXCJUdXJpbiwgSXRhbHlcIixcbiAgICAgICAgaW5zdGl0dXRpb246IFwiUG9saXRlY25pY28gZGkgVG9yaW5vXCIsXG4gICAgICAgIHRpdGxlOiBcIkJTYywgQ29tcHV0ZXIgZW5naW5lZXJpbmdcIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgZnJvbTogbmV3IERhdGUoMjAxNSwgNiksXG4gICAgICAgIHRvOiBuZXcgRGF0ZSgyMDE3LCAxMSksXG4gICAgICAgIGxvY2F0aW9uOiBcIlR1cmluLCBJdGFseVwiLFxuICAgICAgICB0aXRsZTogXCJNU2MsIENvbXB1dGVyIGVuZ2luZWVyaW5nXCIsXG4gICAgICAgIGluc3RpdHV0aW9uOiBcIlBvbGl0ZWNuaWNvIGRpIFRvcmlub1wiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGZyb206IG5ldyBEYXRlKDIwMTUsIDYpLFxuICAgICAgICB0bzogbmV3IERhdGUoMjAxNywgMTEpLFxuICAgICAgICBsb2NhdGlvbjogXCJUdXJpbi9NaWxhbiwgSXRhbHlcIixcbiAgICAgICAgdGl0bGU6IFwiQWx0YSBTY3VvbGEgUG9saXRlY25pY2FcIixcbiAgICAgICAgaW5zdGl0dXRpb246IFwiQVNQXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGZyb206IG5ldyBEYXRlKDIwMTQsIDUsIDEpLFxuICAgICAgICB0bzogbmV3IERhdGUoMjAxNCwgNywgMzApLFxuICAgICAgICBsb2NhdGlvbjogXCJDYW1icmlkZ2UsIE1BIChVU0EpXCIsXG4gICAgICAgIHRpdGxlOiBcIkludGVybnNoaXAgQCBIYXJ2YXJkXCIsXG4gICAgICAgIGluc3RpdHV0aW9uOiBcIkJlcmttYW4gS2xlaW4gQ2VudGVyIEAgSGFydmFyZCBVbml2ZXJzaXR5XCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGZyb206IG5ldyBEYXRlKDIwMTYsIDYsIDEpLFxuICAgICAgICB0bzogbmV3IERhdGUoMjAxNiwgOCwgMjkpLFxuICAgICAgICBsb2NhdGlvbjogXCJCYXRhdmlhLCBJTCAoVVNBKVwiLFxuICAgICAgICB0aXRsZTogXCJJbnRlcm5zaGlwIEAgRmVybWlsYWJcIixcbiAgICAgICAgaW5zdGl0dXRpb246IFwiRmVybWkgTmF0aW9uYWwgQWNjZWxlcmF0b3IgTGFib3JhdG9yeVwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGZyb206IG5ldyBEYXRlKDIwMTcsIDEwKSxcbiAgICAgICAgdG86IG5ldyBEYXRlKDIwMTksIDIpLFxuICAgICAgICBsb2NhdGlvbjogXCJNaWxhbiwgSXRhbHlcIixcbiAgICAgICAgdGl0bGU6IFwiQ29uc3VsdGFudCBAIElCTVwiLFxuICAgICAgICBpbnN0aXR1dGlvbjogXCJJQk1cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBmcm9tOiBuZXcgRGF0ZSgyMDE5LCA0KSxcbiAgICAgICAgdG86IG51bGwsXG4gICAgICAgIGxvY2F0aW9uOiBcIlR1cmluLCBJdGFseVwiLFxuICAgICAgICB0aXRsZTogXCJNU2MsIENvbXB1dGVyIGVuZ2luZWVyaW5nXCIsXG4gICAgICAgIGluc3RpdHV0aW9uOiBcIlBvbGl0ZWNuaWNvIGRpIFRvcmlub1wiXG4gICAgfVxuXTsiXSwic291cmNlUm9vdCI6IiJ9